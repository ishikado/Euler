(defun make-triangle-list(n)
  (let ((lt '(1)))
    (dotimes (x (- n 1))
      (cond ((<= 2 x)
	     (nconc lt (list (/ (* x (1+ x)) 2)))))) lt))

(setq penh (make-hash-table))
(defun set-Pentagonal-hash(n)
  (dotimes (x (- n 1))
    (cond ((null (zerop x))
	   (setf (gethash (/ (* x (1- (* 3 x))) 2) penh) t)))))
(set-Pentagonal-hash 100000)

(setq hexh (make-hash-table))
(defun set-Hexagonal-hash(n)
  (dotimes (x (- n 1))
    (cond ((null (zerop x))
	   (setf (gethash (* x (1- (* 2 x))) hexh) t)))))
(set-Hexagonal-hash 100000)
(setq a (make-triangle-list 100000))
(dolist (elem a)
  (cond ((and (null (null (gethash elem hexh)))
	      (null (null (gethash elem penh))))
	 (print elem))))
