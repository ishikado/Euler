(defun pentagonal-number (n)
  (/ (* n (- (* 3 n) 1)) 2))
(defun make-pentagonal-number-list(x)
  (let ((res (list (pentagonal-number 1))))
    (dotimes (i (1- x))
      (nconc res (list (pentagonal-number (+ 2 i)))))
    res))
(setq lis (make-pentagonal-number-list 10000))
(setq ht (make-hash-table))
(dolist (x lis)
  (setf (gethash x ht) t))
(setq res 1000000000000000000)
(dolist (i lis)
  (dolist (j lis)
    (cond ((and (< i j) (null (null (gethash (+ i j) ht)))
		(null (null (gethash (abs (- i j)) ht))))
	   (print (list i j)) (setq res (min res (abs (- i j))))))))
(print res)