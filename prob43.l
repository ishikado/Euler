(defun make-permutation(num-set)
  (let ((perm-list nil))
    (defmacro local-rec-perm(x)
      `(local-perm (cons ,x result) (remove ,x list)))
    (defun local-perm (result list)
      (cond ((null list) (push result perm-list))
	    (t (dolist (x list)
		 (local-rec-perm x)))))
    (local-perm nil num-set) perm-list))

;(print (length (make-permutation '(1 2 3 4 5 6 7 8 9 0))))

(defun make-num(seq)
  (let ((res 0))
    (dotimes (x (length seq))
      (setq res (+ (* 10 res) (elt seq x)))) res))

;(print (cond (nil (print "hello"))))

;(print (make-num '(1 4 0)))
; elemがPandigitalか調べる
(defun check-Pandigital(elem)
  (let ((num 0) (seq nil) (cmp-list `(2 3 5 7 11 13 17)) (ok t))
    (dotimes (x 3)
      (push (elt elem x) seq))
    (setq seq (reverse seq))
    (dotimes (x 7)
      (setq seq (append seq (list (elt elem (+ 3 x)))))
      (setq seq (cdr seq))
      ;(print x)
      (cond ((null (eq (mod (make-num seq) (elt cmp-list x)) 0))
	     (setq ok nil)))
      ) ok))

(setq cnt 0)
(format t "start~1%")
(dolist (x (make-permutation '(1 2 3 4 5 6 7 8 9 0)))
  (cond ((check-Pandigital x) (setq cnt (+ (make-num x) cnt)))))
(princ cnt)
